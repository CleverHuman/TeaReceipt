import request from 'supertest';
import bcrypt from 'bcryptjs';
import { PrismaClient } from '@prisma/client';
import createServer from '../src/index.js';
import AuthService from '../src/Services/AuthenticationService.js';
import { generateRefreshToken } from '../src/Utils/GenerateJWTToken.js';
const prisma = new PrismaClient();

describe("generate the accessToken from refreshToken", () => {
  const app = createServer();
  let user;
  let userExists;
  let refreshToken;
  let authService = new AuthService();

  beforeAll(async () => {
    user = {
      name: "User1",
      email: "user1@email.com",
      password: "password123"
    };

    await prisma.users.create({
      data: {
        name: user.name,
        email: user.email,
        username: `user${Math.floor(1000 + Math.random() * 9000)}`,
        password: bcrypt.hashSync(user.password, 10),
      },
    });

    userExists = await prisma.users.findFirst({
      where: {
        email: user.email,
      }
    });

    refreshToken = generateRefreshToken({
      id: userExists.id,
      name: userExists.name,
      email: userExists.email,
      username: userExists.username
    });
  });

  afterAll(async () => {
    await prisma.users.deleteMany({
      where: {
        email: user.email
      }
    });
    await prisma.$disconnect();
  });

  test("valid password", () => {
    const passwordMatch = bcrypt.compareSync(
      user.password,
      userExists.password
    );

    expect(passwordMatch).toBeTruthy();
  });

  test("valid accessToken generated by refreshToken", () => {
    expect(refreshToken).not.toBeNull();
    expect(refreshToken).toBeDefined();
  });

  test("sign function returns tokens", async () => {
    const response = await authService.signin({ email: user.email, password: user.password });

    expect(response).toHaveProperty('accessToken');
    expect(response).toHaveProperty('refreshToken');
  });

  test("signin endpoint sets httpOnly cookies", async () => {
    const response = await request(app)
      .post(`/auth/signin`)
      .set("content-type", "application/json")
      .send({
        email: user.email,
        password: user.password
      });

    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('accessToken');
    expect(response.body).toHaveProperty('refreshToken');

    const cookies = response.headers['set-cookie'];
    expect(cookies).toBeDefined();
    expect(cookies.length).toBeGreaterThan(0);

    cookies.forEach(cookie => {
      expect(cookie).toEqual(expect.stringContaining('HttpOnly'));
    });
  });
});